# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Custom Docker Image. Primary container image where all the steps run.
      - image: maven:3

# Specify service dependencies here if necessary
# CircleCI maintains a library of pre-built images
# documented at https://circleci.com/docs/2.0/circleci-images/

    working_directory: /tmp/CircleCI/
      
# These steps go into the primary image
    steps:
       - checkout

       - setup_remote_docker

       - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin

       - run:
          name: Install Docker Compose
          command: |
            set -x
            curl -L https://github.com/docker/compose/releases/download/1.11.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose && cd /usr/local/bin && ls -alrt && docker-compose version

       - run:
          name: Run Docker compose
          command: |
            docker-compose up -d 
    
       - run:
          name: Run test
          command: mvn test
       
      #  - run:
      #     name: Sonar Check
      #     command: mvn sonar:sonar -s /home/circleci/project/settings.xml
       
       - run:
          name: Maven packaging
          command: mvn clean package

       - store_artifacts:
          path: /tmp/artifacts/

       - run:
          name: list the dire
          command: cd /tmp/CircleCI/ && ls -alrt && cd /tmp/CircleCI/target/ && ls -alrt

#Uploading artifacts to Artifactory
       - run:
          name: Artifacts Upload
          command: curl -u $ARTIFACTORY_USERNAME:$ARTIFACTORY_PASSWORD $ARTIFACTORY_PATH/$STAGING_FOLDER/$GROUPID/$ARTIFACTID/$VERSION/$ARTIFACTID.jar -T /tmp/CircleCI/target/students-1.0.0-SNAPSHOT.jar

# Build and Push Image      
       - run: docker login devacrdm3fajjfh354g.azurecr.io -u devacrdm3fajjfh354g -p '5/cR/xRk=7++5n+7+l/+dym=/YUmVBoA'

       - run: docker build -t students:0.0.1 /tmp/CircleCI/

       - run: docker tag students:0.0.1 devacrdm3fajjfh354g.azurecr.io/students

       - run: docker push devacrdm3fajjfh354g.azurecr.io/students
           
            #  docker build -t student:1.0 /tmp/CircleCI/
            # if [ "${CIRCLE_BRANCH}" == "master" ]; then
            #   login="az login -u devacrdm3fajjfh354g -p 5/cR/xRk=7++5n+7+l/+dym=/YUmVBoA"
            #   ${login}
            #   docker push "devacrdm3fajjfh354g.azurecr.io/suniltest"
            # fi
      #       - docker login -e $DOCKER_USER -u $DOCKER_USER -p $DOCKER_PASSWORD $REGISTRY_HOST
      #       - docker push $REGISTRY_HOST/circleci
      